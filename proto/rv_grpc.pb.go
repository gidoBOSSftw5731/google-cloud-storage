// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rv

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RVClient is the client API for RV service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RVClient interface {
	// FileUpload accepts a single file upload request and
	// returns a status message to the caller.
	FileUpload(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
}

type rVClient struct {
	cc grpc.ClientConnInterface
}

func NewRVClient(cc grpc.ClientConnInterface) RVClient {
	return &rVClient{cc}
}

func (c *rVClient) FileUpload(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/rv.proto.RV/FileUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RVServer is the server API for RV service.
// All implementations must embed UnimplementedRVServer
// for forward compatibility
type RVServer interface {
	// FileUpload accepts a single file upload request and
	// returns a status message to the caller.
	FileUpload(context.Context, *FileRequest) (*FileResponse, error)
	mustEmbedUnimplementedRVServer()
}

// UnimplementedRVServer must be embedded to have forward compatible implementations.
type UnimplementedRVServer struct {
}

func (UnimplementedRVServer) FileUpload(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (UnimplementedRVServer) mustEmbedUnimplementedRVServer() {}

// UnsafeRVServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RVServer will
// result in compilation errors.
type UnsafeRVServer interface {
	mustEmbedUnimplementedRVServer()
}

func RegisterRVServer(s grpc.ServiceRegistrar, srv RVServer) {
	s.RegisterService(&RV_ServiceDesc, srv)
}

func _RV_FileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RVServer).FileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rv.proto.RV/FileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RVServer).FileUpload(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RV_ServiceDesc is the grpc.ServiceDesc for RV service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RV_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rv.proto.RV",
	HandlerType: (*RVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FileUpload",
			Handler:    _RV_FileUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rv.proto",
}
